#include <stdio.h>
#include <stdbool.h>
#include <stdlib.h>

/*1. Teniendo un TDA lista enlazada ordenada de enteros definido como
typedef struct {
struct nodo *prim;
} lista_ordenada_t;
y su nodo como
struct nodo {
struct nodo *sig;
int dato;
};
implementar una primitiva
bool lista_ordenada_insertar(lista_ordenada_t *l, int dato);
que inserte el dato en la lista l.*/

typedef struct {
struct nodo *prim;
} lista_ordenada_t;

struct nodo {
struct nodo *sig;
int dato;
};

bool lista_ordenada_insertar(lista_ordenada_t *l, int dato) {
    struct nodo *actual = l->prim;
    while(actual->sig != NULL) {
        struct nodo *sig = actual->sig;
        if(actual->dato == sig->dato)
            actual->sig = sig->sig;
        else if(actual->dato + 1 < sig->dato) {
            struct nodo *nuevo = malloc((actual->dato +1) * sizeof(struct nodo));
            if(nuevo == NULL) return false;
            actual->sig = nuevo;
            actual = nuevo;
        }
        else {
            actual = sig;
        }
    }
    return true;
}



/*2. Se pide implementar una función
int arreglo_reducir(const int arreglo[], size_t n, int (*f)(int a, int b));
que reciba un arreglo de n enteros y le aplique, de a pares, la función f a sus elementos y al
resultado de la operación.
Si el arreglo tuviera sólo un elemento se debe devolver ese elemento, si tuviera más de uno, el
resultado se originará de la función f.
Ejemplo, si el arreglo fuera {1, 2, 4, 6} y f fuera la suma se debería devolver 13; en cambio si
f fuera el producto se debería devolver 48.*/

int arreglo_reducir(const int arreglo[], size_t n, int (*f)(int a, int b)) {
    if(n == 1) {
        return arreglo[0];
    }
    int pos = arreglo[0];
    for(size_t i = 1; i < n; i++) {
        pos = f(pos, arreglo[i]);
    }
    return pos;
}


/*3. Escribir una función que dada una cadena de caracteres y un carácter devuelva la cantidad de
apariciones de ese carácter en la cadena utilizando recursividad.*/

int cantidad_de_reps(const char *cadena, char c) {
    if(*cadena == '\0')
        return 0;
    return (*cadena == c) + cantidad_de_reps(cadena + 1, c);
}
