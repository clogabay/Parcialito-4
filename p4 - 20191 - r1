#include <stdio.h>
#include <stdbool.h>
#include <stdlib.h>

/*1. Teniendo representado el TDA lista de enteros como typedef struct {struct nodo *prim;} lista_t; y el nodo
struct nodo {struct nodo *sig; int dato;}; implementar una función
void unir_listas_ordenadas(lista_t *d, lista_t *o);
que reciba dos listas ordenadas d y o y que junte ambas listas en d. La lista resultante debe quedar ordenada y la lista o
debe quedar vacía.
(Nota: Sólo se puede recorrer las listas una única vez.)*/

typedef struct {
    struct nodo *prim;
} lista_t;

struct nodo {
    struct nodo *sig; int dato;
};

void unir_listas_ordenadas(lista_t *d, lista_t *o) {
    if(o->prim == NULL) return;
    if(d->prim == NULL) {
        d->prim = o->prim;
        o->prim = NULL;
        return;
    }
    struct nodo *d_actual = d->prim;
    struct nodo *o_actual = o->prim;
    while(d_actual->sig != NULL && o_actual->sig != NULL) {
        if(d_actual->dato < o_actual->dato)
            d_actual = d_actual->sig;
        else if(d_actual->dato > o_actual->dato) {
            struct nodo *o_anterior = o_actual;
            o_actual = o_anterior->sig;
            o_anterior->sig = d_actual->sig;
            d_actual->sig = o_anterior;
            d_actual = o_anterior->sig;
        }
        else {
            d_actual = d_actual->sig;
            o_actual = o_actual->sig;
        }
    }
    if(d_actual->sig == NULL)
        d_actual->sig = o_actual;
}


/*2. Se quiere implementar un TDA que sea capaz de almacenar 50 valores booleanos indexados por un entero entre 0 y 49.
Se propone implementar el TDA sobre la declaración typedef uint64_t booleanos_t; y utilizar los bits de este entero
para guardar los estados de los diferentes booleanos.
a. Implementar la primitiva void booleanos_guardar(booleanos_t *b, int indice, bool valor); que almacena el valor en la posición indice.
b. Implementar la primitiva bool booleanos_obtener(const booleanos_t *b, int indice); que devuelve el
valor almacenado en la posición indice.*/



/*3. Implementar una función recursiva que responda al siguiente prototipo
bool es_palindromo(const char *s);
que reciba una cadena de caracteres s y que indique si la misma es palíndroma o no. Una cadena es palíndroma si se lee
igual desde ambos lados, como por ejemplo "neuquen".*/

bool es_palindromo(const char *s) {
    for(size_t n = 0; s[n]; n++) {
        if(n == 0)
            return true;
        if(s[0] != s[n - 1])
            return false;
        return es_palindromo(s + 1);
    }
}
